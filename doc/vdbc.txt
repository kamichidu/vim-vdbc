*vim-vdbc.txt*

Version: 0.0.0
Author:  kamichidu <c.kamunagi@gmail.com>
Last Change: 27-Jul-2014.
License: The MIT License (MIT)

Copyright (c) 2013-2014 kamichidu

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

CONTENTS													   *vdbc-contents*

Interface													  |vdbc-interface|
Driver															 |vdbc-driver|
	Specification								   |vdbc-driver-specification|
	Standard Drivers							|vdbc-driver-standard-drivers|

NOTE:
these APIs still be under development, may be changed without any notice.

==============================================================================
INTERFACE													  *vdbc-interface*

Functions ~
															  *vdbc#connect()*
	vdbc#connect({config})
		connect to database. this function returns vdbc object. it takes
		|Dictionary| to connect database. keys are:

		driver		(required)
			the driver name which will be used. it is |String| type.

		dbname		(required)
			the database name. it is |String| type.

		host		(optional)
			the host name or ip address. it is |String| type.
			(default: depends on driver)

		port		(optional)
			the port number. it is |Number| type.
			(default: depends on driver)

		username	(optional)
			the user name. it is |String| type.
			(default: depends on driver)

		password	(optional)
			the password for user which will connect a database. it is
			|String| type.
			(default: depends on driver)

		encoding	(optional)
			the database encoding. it is |String| type.
			(default: depends on driver)

													   *vdbc#connect_by_dsn()*
	vdbc#connect_by_dsn({dsn})
		connect to database using {dsn}. {dsn} is |String| type and its format
		is (written in ebnf form):

			dsn = "vdbc" , ":" , driver , ":" , option and value ,
			          {";" , option and value} ;

			option and value = option , "=" , value ;

		for example:
>
			vdbc#connect_by_dsn('sqlite3_libsqlite3:dbname=./dbfile')
<

VDBC Object ~
														   *vdbc.disconnect()*
	vdbc.disconnect()
		disconnect from database.

															  *vdbc.prepare()*
	vdbc.prepare({query})
		it returns Statement Handle Object for later execution. it will be
		used for "select", "insert", "delete" or other statement which can
		accept placeholders.
		for more details, see Statement Handle Object section.

															  *vdbc.execute()*
	vdbc.execute({query}, ...)
		execute {query} without query output. it will be used for non-select
		statement.
		it can takes |Dictionary| for 2nd argument.

		params
			parameters for prepared statement.

		it is equivalent to:
>
		try
			let stmt= vdbc.prepare('select * from table where column = ?')

			call stmt.execute(['value'])
		finally
			if exists('stmt')
				call stmt.finish()
			endif
		endtry
<

													   *vdbc.select_as_list()*
	vdbc.select_as_list({query}, ...)
		similar to |vdbc.execute()| except to return query output |List| of
		|List|. it will be used for select statement.

													   *vdbc.select_as_dict()*
	vdbc.select_as_dict({query}, ...)
		similar to |vdbc.execute()| except to return query output |List| of
		|Dictionary|. it will be used for select statement.

															    *vdbc.begin()*
	vdbc.begin()
		it returns Transaction Object that enable transactions until the next
		call to |tx.commit()| or |tx.rollback()|.
		for more details, see Transaction Object section.

															 *vdbc.catalogs()*
	vdbc.catalogs(...)
		NOTE: experimental

		it returns a |List| of catalog name. it can takes |Dictionary| for
		filtering catalogs. filtering keys are:

			catalog
				default: "%"

															 *vdbc.schemata()*
	vdbc.schemata(...)
		NOTE: experimental

		it returns a |List| of schema name. it can takes |Dictionary| for
		filtering schemata. filtering keys are:

			catalog
				default: "%"

			schema
				default: "%"

															   *vdbc.tables()*
	vdbc.tables(...)
		NOTE: experimental

		it returns a |List| of table info object. it can takes |Dictionary|
		for filtering table info. filtering keys are:

			catalog
				default: "%"

			schema
				default: "%"

			table
				default: "%"

			types
				default: ["table", "view"]

		for more details, see Table Info Object section.

															  *vdbc.columns()*
	vdbc.columns(...)
		NOTE: experimental

		it returns a |List| of column info object. it can take |Dictionary|
		for filtering column info. filtering keys are:

			catalog
				default: "%"

			schema
				default: "%"

			table
				default: "%"

			column
				default: "%"

		for more details, see Column Info Object section.

														 *vdbc.foreign_keys()*
	vdbc.foreign_keys(...)
		NOTE: experimental

															  *vdbc.indices()*
	vdbc.indices(...)
		NOTE: experimental

															*vdbc.sequences()*
	vdbc.sequences(...)
		NOTE: experimental

												*vdbc-statement-handle-object*
Statement Handle Object ~

	stmt.execute(...)
		execute this statement without any output. this can be used for
		non-select statement.
		it can take a |List| that will be binded for this statement.

	stmt.select_as_list(...)
		execute this statement with output as |List| of |List|. this can be
		used for select statement.
		it can take a |List| that will be binded for this statement.

	stmt.select_as_dict(...)
		execute this statement with output as |List| of |Dictionary|. this can
		be used for select statement.
		it can take a |List| that will be binded for this statement.

	stmt.finish()
		release related resources for this statement. after calling this
		function, you can't call any functions for this object.

													 *vdbc-transaction-object*
Transaction Object ~

	tx.commit()

	tx.rollback()

	tx.is_active()

													  *vdbc-table-info-object*
Table Info Object ~

	this has some attributes below.

	catalog
		table catalog name.

	schema
		schema name containing this table.

	name
		table (or view, synonym, etc) name.

	type
		one of the following:
			"table"
			"view"

	remarks
		table description. in other words, table comment.

													 *vdbc-column-info-object*
Column Info Object ~

	this has some attributes below.

	catalog
		catalog name.

	schema
		schema name.

	table
		table name.

	name
		column name.

	type_name
		data type name.

		NOTE: database dependent!

    ordinal_position
		column sequence number (starting with 1).

	nullable
		a column can accept null value, or not.

	remarks
		column description. in other words, column comment.

==============================================================================
DRIVER															 *vdbc-driver*

the driver is a implementation of the vdbc interface.

												   *vdbc-driver-specification*
Specification ~

all drivers must have some attributes and functions below:

	vdbc.name
		it is a |String| type driver name. it will be used as driver name by
		|vdbc#connect()| and |vdbc#connect_by_dsn()|.

	vdbc.priority
		it is a |Number| type. it will be used by |vdbc#connect()| and
		|vdbc#connect_by_dsn()|.
		if there are some prefix matched drivers, we will choose a driver
		which has minimum priority number.

		priority order: (higher priority) -inf < 0 < inf (lower priority)

	vdbc#driver#{driver}#define()
		returns a |Dictionary| of driver.

	driver.connect({args})
		connect a database.

	driver.prepare({args})
		it takes a |Dictionary|.

		query	(required)
			sql statement will be prepared.

		it returns an id value for execution.

	driver.deallocate({args})
		it takes a |Dictionary|.

		statement_id	(required)
			an id for prepared statement.

	driver.execute({args})
		executes a prepared statement, and no output.
		it takes a |Dictionary| which has:

		statement_id	(required)
			prepared statement id.

		bind_values		(required)
			|List| will be binded for prepared statement.

	driver.select_as_list({args})
		executes and returns query output as |List| of |List|.
		it takes a |Dictionary| which has:

		statement_id	(required)
			prepared statement id.

		bind_values		(required)
			|List| will be binded for prepared statement.

	driver.select_as_dict({args})
		executes and returns query output as |List| of |Dictionary|.
		it takes a |Dictionary| which has:

		statement_id	(required)
			prepared statement id.

		bind_values		(required)
			|List| will be binded for prepared statement.

	driver.disconnect()
		disconnect related database.

and optional functions are following:

	driver.begin()

	driver.commit()

	driver.rollback()

	vdbc.catalogs(...)

	vdbc.schemata(...)

	vdbc.tables(...)

	vdbc.columns(...)

	vdbc.foreign_keys(...)

	vdbc.indices(...)

	vdbc.sequences(...)

												*vdbc-driver-standard-drivers*
Standard Drivers ~

	pg
		the PostgreSQL driver using psql command. if you want to use this
		driver, you have to install a psql command.

		dependencies:
			postgresql-libs       (On Arch Linux)
			postgresql-client-9.3 (On Ubuntu 14.x)

	pg_libpq
		the PostgreSQL driver using libpq c/c++ interface. if you want to use
		this driver, you have to build a dynamic library before use this.

		dependencies:
			postgresql-libs   (On Arch Linux)
			libpq5, libpq-dev (On Ubuntu 14.x)

	sqlite3
		the SQLite ver.3 driver using sqlite3 command. if you want to use this
		driver, you have to install a sqlite3 command.

		dependencies:
			sqlite  (On Arch Linux)
			sqlite3 (On Ubuntu 14.x)

	sqlite3_libsqlite3
		the SQLite ver.3 driver using SQLite c/c++ interface. this driver
		requires its dynamic library. we built a dynamic library for
		MS-Windows 64bit. so you can use this driver without building. if you
		use a *nix like system, please build a dynamic library before use
		this.

		dependencies:
			(nothing)

==============================================================================
vim:tw=78:ts=4:ft=help:norl:fen:noet:
